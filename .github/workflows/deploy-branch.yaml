name: Branch Lifecycle

on:
  push:
    branches-ignore:
      - main
      - dev
  delete:
    branches-ignore:
      - main
      - dev

jobs:
  deploy:
    if: |
      github.event_name == 'push' &&
      !contains('main dev', github.ref_name)
    runs-on: [self-hosted]
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      - name: Prepare Git Metadata
        run: |
          echo "BRANCH=${{ github.ref_name }}" >> $GITHUB_ENV
          echo "REPO=https://github.com/${GITHUB_REPOSITORY}.git" >> $GITHUB_ENV
          echo "USER=${{ github.actor }}" >> $GITHUB_ENV
          echo "EMAIL=$(git log -1 --pretty=format:'%ae')" >> $GITHUB_ENV

      - name: Set up kubectl
        run: |
          # Example for Minikube
          if kubectl config get-contexts minikube &>/dev/null; then
            kubectl config use-context minikube
          fi

      - name: Create namespace if missing
        run: |
          #BRANCH="${GITHUB_REF##*/}"
          kubectl get ns "$BRANCH" || kubectl create ns "$BRANCH"
        env:
          GITHUB_REF: ${{ github.ref }}

      - name: Create ArgoCD application for new branch
        run: |
          echo "Applying ArgoCD Application manifest to context minikube..."
          cat configurations/"$BRANCH"/hello-app-argocd.yaml
          kubectl -n argocd apply --context=minikube -f configurations/"$BRANCH"/hello-app-argocd.yaml
  
      # - name: Commit & Push Configuration Files
      #   run: |
      #     git config user.name "${{ github.actor }}"
      #     git config user.email "$(git log -1 --pretty=format:'%ae')"
          
      #     git status
      #     git add configurations/"$BRANCH"
      #     git commit -m "Initialize deployment config for branch [$BRANCH]"
      #     git push --set-upstream origin "$BRANCH"
      #   env:
      #     BRANCH: ${{ github.ref_name }}


  cleanup:
    if: |
      github.event_name == 'delete' &&
      github.event.ref_type == 'branch' &&
      !contains('main dev', github.event.ref)
    runs-on: self-hosted
    steps:
      - name: Set up kubectl
        run: |
          if kubectl config get-contexts minikube &>/dev/null; then
            kubectl config use-context minikube
          fi
  
      - name: Force delete namespace
        shell: bash
        run: |
          force_delete_namespace() {
            local namespace=$1
            local context=$2
            echo "--- Forcefully cleaning namespace '$namespace' on context '$context' ---"
  
            echo "Patching and deleting Jobs in '$namespace'..."
            job_names=$(kubectl get jobs -n "$namespace" --context "$context" -o custom-columns=NAME:.metadata.name --no-headers 2>/dev/null || true)
  
            if [ -n "$job_names" ]; then
              echo "$job_names" | while IFS= read -r job_name; do
                if [ -n "$job_name" ]; then
                  echo "  - Patching Job '$job_name' to remove finalizers..."
                  kubectl patch job "$job_name" -n "$namespace" --context "$context" --type='json' -p='[{"op": "remove", "path": "/metadata/finalizers"}]' >/dev/null 2>&1 || true
                  echo "  - Deleting Job '$job_name'..."
                  kubectl delete job "$job_name" -n "$namespace" --context "$context" --ignore-not-found=true --timeout=30s || true
                fi
              done
            else
              echo "  - No jobs found to clean."
            fi
  
            echo "Deleting namespace '$namespace'..."
            kubectl delete namespace "$namespace" --context "$context" --ignore-not-found=true
            echo "--- Namespace '$namespace' cleanup initiated. Note: final deletion is async. ---"
          }
  
          NS="${{ github.event.ref }}"
          CONTEXT="minikube"
          # First, delete the ArgoCD application that manages the resources.
          echo "Deleting Azure ArgoCD Application: $NS..."
          kubectl delete application "$NS" -n argocd --context "$CONTEXT" --ignore-not-found=true
          # Wait briefly for the ArgoCD controller to start terminating resources.
          sleep 5
          force_delete_namespace "$NS" "$CONTEXT"
